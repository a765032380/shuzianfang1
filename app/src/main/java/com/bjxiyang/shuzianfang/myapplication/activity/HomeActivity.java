package com.bjxiyang.shuzianfang.myapplication.activity;import android.Manifest;import android.annotation.SuppressLint;import android.app.Notification;import android.app.NotificationManager;import android.app.PendingIntent;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.drawable.BitmapDrawable;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.provider.ContactsContract;import android.support.v13.app.ActivityCompat;import android.support.v4.app.TaskStackBuilder;import android.support.v4.content.ContextCompat;import android.support.v4.content.LocalBroadcastManager;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.app.NotificationCompat;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.LinearSnapHelper;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.SnapHelper;import android.telephony.TelephonyManager;import android.util.Log;import android.view.View;import android.view.ViewGroup;import android.view.ViewParent;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.view.animation.LayoutAnimationController;import android.view.animation.TranslateAnimation;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import com.baisi.myapplication.okhttp.listener.DisposeDataListener;import com.baisi.myapplication.okhttp.request.RequestParams;import com.bjxiyang.shuzianfang.R;import com.bjxiyang.shuzianfang.myapplication.adapter.RollViewAdapter;import com.bjxiyang.shuzianfang.myapplication.anim.EaseOutElasticInterpolator;import com.bjxiyang.shuzianfang.myapplication.app.GuardApplication;import com.bjxiyang.shuzianfang.myapplication.manager.MyPreferences;import com.bjxiyang.shuzianfang.myapplication.manager.SPManager;import com.bjxiyang.shuzianfang.myapplication.manager.UserManager;import com.bjxiyang.shuzianfang.myapplication.model.ByCom;import com.bjxiyang.shuzianfang.myapplication.model.FanHui;import com.bjxiyang.shuzianfang.myapplication.model.GuangGao;import com.bjxiyang.shuzianfang.myapplication.model.HomeBean;import com.bjxiyang.shuzianfang.myapplication.model.Init;import com.bjxiyang.shuzianfang.myapplication.model.JiGuang;import com.bjxiyang.shuzianfang.myapplication.model.Phoneinfo;import com.bjxiyang.shuzianfang.myapplication.model.SelectPlot;import com.bjxiyang.shuzianfang.myapplication.model.TianQi;import com.bjxiyang.shuzianfang.myapplication.model.WuYeJiaoFei;import com.bjxiyang.shuzianfang.myapplication.response_xy.Response_AF;import com.bjxiyang.shuzianfang.myapplication.response_xy.XY_Response;import com.bjxiyang.shuzianfang.myapplication.step.service.StepService;import com.bjxiyang.shuzianfang.myapplication.until.DeEnCode;import com.bjxiyang.shuzianfang.myapplication.view.MyAdapter2;import com.bjxiyang.shuzianfang.myapplication.until.DialogUntil;import com.bjxiyang.shuzianfang.myapplication.until.GetGuanggaoUrl;import com.bjxiyang.shuzianfang.myapplication.until.MyUntil;import com.bjxiyang.shuzianfang.myapplication.update.network.RequestCenter;import com.bjxiyang.shuzianfang.myapplication.widgets.CommonActionSheetDialog;import com.example.liangmutian.randomtextviewlibrary.RandomTextView;import com.google.gson.Gson;import com.handmark.pulltorefresh.library.ILoadingLayout;import com.handmark.pulltorefresh.library.PullToRefreshBase;import com.handmark.pulltorefresh.library.PullToRefreshScrollView;import com.jude.rollviewpager.RollPagerView;import com.library.viewspread.helper.BaseViewHelper;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.ArrayList;import java.util.List;import java.util.Set;import butterknife.BindView;import butterknife.ButterKnife;import cn.jpush.android.api.JPushInterface;import cn.jpush.android.api.TagAliasCallback;/** * Created by Administrator on 2017/9/5 0005. */public class  HomeActivity extends BeasActivity implements View.OnClickListener, SwipeRefreshLayout.OnRefreshListener {    /**     * UI     *     */    private LinearLayoutManager mLayoutManager;    @BindView(R.id.ll_address)    LinearLayout ll_address;    @BindView(R.id.tv_address)    TextView tv_address;    @BindView(R.id.tishi_home)    TextView tishi_home;    @BindView(R.id.my_recycler_view)    RecyclerView mRecyclerView;    @BindView(R.id.tv_wendu)    RandomTextView tv_wendu;    @BindView(R.id.tv_tianqi)    TextView tv_tianqi;    @BindView(R.id.iv_shezhi)    ImageView iv_shezhi;    @BindView(R.id.iv_yun1)    ImageView iv_yun1;    @BindView(R.id.iv_yun2)    ImageView iv_yun2;    @BindView(R.id.iv_yun3)    ImageView iv_yun3;    @BindView(R.id.home_sun)    ImageView home_sun;    @BindView(R.id.tv_xiaoqugonggao)    TextView tv_xiaoqugonggao;    @BindView(R.id.swipeRefreshLayout)    PullToRefreshScrollView swipeRefreshLayout;    @BindView(R.id.text_men)    LinearLayout text_men;    @BindView(R.id.iv_shezhi2)    TextView iv_shezhi2;    @BindView(R.id.iv_tishi2)    TextView iv_tishi2;    @BindView(R.id.iv_shezhi3)    ImageView iv_shezhi3;    @BindView(R.id.iv_tishi3)    ImageView iv_tishi3;    @BindView(R.id.iv_tishi)    ImageView iv_tishi;    @BindView(R.id.lv_shezhi)    LinearLayout lv_shezhi;    @BindView(R.id.tv_wendu1)    TextView tv_wendu1;    @BindView(R.id.tv_wendu2)    TextView tv_wendu2;    @BindView(R.id.tv_wendu3)    TextView tv_wendu3;    @BindView(R.id.fl_inner)    FrameLayout fl_inner;    @BindView(R.id.my_content_view)    LinearLayout my_content_view;    @BindView(R.id.roll_view_pager)    RollPagerView mRollViewPager;    @BindView(R.id.ll_shezhi3)    LinearLayout ll_shezhi3;    private RollViewAdapter adapter;    /**     * DATA     */    private int guideResourceId = 0;//引导页图片资源id    private int guideResourceId1 = 0;//引导页图片资源id    public static int status = 1;    private View view;    private LocationManager locationManager;    private String locationProvider;    public static boolean isForeground;    private String phoneInfoString = "";    public static final String KEY_TITLE = "title";    public static final String KEY_MESSAGE = "message";    public static final String KEY_EXTRAS = "extras";    private long vT[] = {300, 100, 300, 100};    private MessageReceiver mMessageReceiver;    private List<ByCom.Obj> mListByCom;    private int communityId = -1;    private int nperId;    private int floorId;    private int unitId;    private ByCom byCom;    private MyAdapter2 mAdapter;    public CommonActionSheetDialog commonActionSheetDialog;    private List<SelectPlot.Obj> mList;    public static HomeActivity homeActivity;    public static final String MESSAGE_RECEIVED_ACTION = "com.bjxiyang.shuzianfang.MESSAGE_RECEIVED_ACTION";    private double jingdu=0;    private double weidu=0;    private Animation animation;    private LayoutAnimationController lac;    private boolean isOneImage=true;    private static OngetData ongetData;    public interface OngetData {         void OngetData(List<GuangGao.ObjBean.BannerObjBean.AdInfoBean> mList);    }    public static void setOngetData(OngetData ongetDat) {        ongetData = ongetDat;    }    int value1=0;    private ILoadingLayout mILoadingLayout;    Handler handler = new Handler(new Handler.Callback() {        @Override        public boolean handleMessage(Message message) {            if (message.what==1){                swipeRefreshLayout.onRefreshComplete();            }            if (message.what==2000){                local((List<GuangGao.ObjBean.BannerObjBean.AdInfoBean>)message.obj);//                ImageLoaderManager.getInstance(HomeActivity.this)//                        .displayImage(home_sun,(String) message.obj);            }            return false;        }    });    public void local(List<GuangGao.ObjBean.BannerObjBean.AdInfoBean> adInfoBean) {        //设置适配器        adapter = new RollViewAdapter(mRollViewPager);        mRollViewPager.setAdapter(adapter);        ongetData.OngetData(adInfoBean);    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main4);        setGuideResId(R.drawable.dianjitianjiaxiaoqu1);//添加引导页        if (SPManager.getInstance().getInt("status",1)==1) {            addGuideImage();//添加引导页        }        ButterKnife.bind(this);        homeActivity = this;//设置播放时间间隔        mRollViewPager.setPlayDelay(2000);        //设置透明度        mRollViewPager.setAnimationDurtion(500);        initUI();        animation= AnimationUtils.loadAnimation(getApplicationContext(), R.anim.left);        animation.setInterpolator(new EaseOutElasticInterpolator());        animation.setFillAfter(true);//设置为true，动画转化结束后被应用        lac= new LayoutAnimationController(animation);        lac.setDelay(0.1f);        lac.setOrder(LayoutAnimationController.ORDER_NORMAL);        getLocation();//获取位置信息//        init();//初始化//        setHongDian();        quanxian();        getTianQi();//        setupService();        JPushInterface.setDebugMode(true);//极光初始化        JPushInterface.init(this);//极光初始化        setAlias();//设置极光别名        JPushInterface.resumePush(HomeActivity.this);        getImageUrl2();        registerMessageReceiver();//注册广播        if (SPManager.getInstance().getBoolean("isOne", false)) {            nperId = SPManager.getInstance().getInt("nperId_one", 0);            communityId = SPManager.getInstance().getInt("communityId_one", 0);            floorId = SPManager.getInstance().getInt("floorId_one", 0);            unitId = SPManager.getInstance().getInt("unitId_one", 0);//            if (!SPManager.getInstance().getString("test_men", "").equals("")) {//                tv_address.setText(SPManager.getInstance().getString("test_men", ""));//                getDummyDatas();//            }        } else {//            getData();        }    }    //设置首页红点//    private void setHongDian(){//        if (SPManager.getInstance().getInt("xiaoxi",0)!=0){//            iv_shezhi.setImageResource(R.drawable.a_btn_menubar_pre);//        }else {//            iv_shezhi.setImageResource(R.drawable.a_btn_menubar);//        }//    }             private void getTianQi() {        String url = XY_Response.URL_TIANQI                + "key=" + "3owrpct92acorhr5"   //天气的KEY                + "&location=" + "beijing"      //定位                + "&language" + "zh-Hans"       //语言                + "&unit=" + "c";               //设置单位//        url="https://api.seniverse.com/v3/weather/now.json?key=3owrpct92acorhr5&location=beijing&language=zh-Hans&unit=c";//        RequestParams params=new RequestParams();//        params.put("key","3owrpct92acorhr5");//        params.put("location","beijing");//        params.put("language","zh-Hans");//        params.put("unit","c");        RequestCenter.getTianqi(url, null, new DisposeDataListener() {            @Override            public void onSuccess(Object responseObj) {                TianQi tianQi = (TianQi) responseObj;                Log.i("llll", "天气:" + tianQi.getResults().get(0).getNow().getTemperature());                if (tianQi.getResults().size() > 0) {                    tv_wendu.setText(tianQi.getResults().get(0).getNow().getTemperature());                    tv_wendu.setPianyilian(RandomTextView.FIRSTF_FIRST);                    tv_wendu.start();                    tv_tianqi.setText(tianQi.getResults().get(0).getNow().getText());                }            }            @Override            public void onFailure(Object reasonObj) {            }        });    }    private void initUI() {        ll_shezhi3.setOnClickListener(this);        iv_shezhi2.setOnClickListener(this);        mILoadingLayout=swipeRefreshLayout.getLoadingLayoutProxy();        mILoadingLayout.setLastUpdatedLabel("上次刷新时间" );//        swipeRefreshLayout.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2<ScrollView>() {//            @Override//            public void onPullDownToRefresh(PullToRefreshBase<ScrollView> refreshView) {//                if (value1<-300){////                    Toast.makeText(HomeActivity.this,"弹出广告",Toast.LENGTH_LONG).show();//                    MyUntil.mStartActivity(HomeActivity.this, HomeGuangGaoActivity.class);//                    swipeRefreshLayout.onRefreshComplete();//                }else {//                    init();////                    Toast.makeText(HomeActivity.this,"刷新",Toast.LENGTH_LONG).show();//                    getTianQi();//                    getImageUrl();//////                    getLocation();//                }////                swipeRefreshLayout.onRefreshComplete();////                swipeRefreshLayout.setRefreshing(false);//            }////            @Override//            public void onPullUpToRefresh(PullToRefreshBase<ScrollView> refreshView) {//                swipeRefreshLayout.onRefreshComplete();////            }//        });        mILoadingLayout.showImage(false);        swipeRefreshLayout.setMode(PullToRefreshBase.Mode.PULL_DOWN_TO_REFRESH);        swipeRefreshLayout.setOnGetValue(new PullToRefreshBase.OnGetValue() {            @Override            public void getValue(int value,boolean isTaiShou) {//                Log.i("LLL",value+"");                if (isOneImage&&value==-1&&isTaiShou){                    getImageUrl1();                }                value1=value;                if (value1<-500){                    mILoadingLayout.setReleaseLabel("松开弹出广告" );                }else if (value1<-160){                    mILoadingLayout.setReleaseLabel("松开即可刷新" );                }else {                    mILoadingLayout.setReleaseLabel("下拉刷新" );                }                if (isTaiShou){                    if (value1<-500){//                    Toast.makeText(HomeActivity.this,"弹出广告",Toast.LENGTH_LONG).show();//                        MyUntil.mStartActivity(HomeActivity.this, HomeGuangGaoActivity.class);                        getImageUrl1();                        swipeRefreshLayout.onRefreshComplete();                    }else if (value1<-160) {                        swipeRefreshLayout.setRefreshing();                        dingshi(1000);                        init();//                    Toast.makeText(HomeActivity.this,"刷新",Toast.LENGTH_LONG).show();                        getTianQi();                        getImageUrl2();                        getDummyDatas();//                    getLocation();                    }                }            }        });//        swipeRefreshLayout.setOnRefreshListener(new PullToRefreshView.OnRefreshListener() {//            @Override//            public void onRefresh() {//                swipeRefreshLayout.postDelayed(new Runnable() {//                    @Override//                    public void run() {//                        swipeRefreshLayout.setRefreshing(false);//                    }//                }, 2000);//            }//        });        tv_xiaoqugonggao.setOnClickListener(this);        lv_shezhi.setOnClickListener(this);        ll_address.setOnClickListener(this);        tishi_home.setOnClickListener(this);        //创建默认的线性LayoutManager        mLayoutManager = new LinearLayoutManager(this);        mLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);        mRecyclerView.setLayoutManager(mLayoutManager);        //设置RecyclerView居中        SnapHelper snapHelper = new LinearSnapHelper();        snapHelper.attachToRecyclerView(mRecyclerView);        //如果可以确定每个item的高度是固定的，设置这个选项可以提高性能        mRecyclerView.setHasFixedSize(true);    }    private void hideYun(){        iv_yun1.setVisibility(View.INVISIBLE);        iv_yun2.setVisibility(View.INVISIBLE);        iv_yun3.setVisibility(View.INVISIBLE);    }    private void showYun(){        int a = 1000;        setAnim(a * 0, iv_yun1);//设置首页云彩1        setAnim(  a  , iv_yun2);    //设置首页云彩2        setAnim(a * 2, iv_yun3);//设置首页云彩3        iv_yun1.setVisibility(View.VISIBLE);        iv_yun2.setVisibility(View.VISIBLE);        iv_yun3.setVisibility(View.VISIBLE);    }    private void getImageUrl1(){        GetGuanggaoUrl.setOnGetImageUrl(2, new GetGuanggaoUrl.OnGetImageUrl() {            @Override            public void getImageUrl(final GuangGao.ObjBean.BannerObjBean.AdInfoBean adInfo) {                if (adInfo!=null) {                    mILoadingLayout.showImage(true);                    if (!isOneImage) {                        Intent intent = new Intent(HomeActivity.this, HomeGuangGaoActivity.class);                        intent.putExtra("imageurl", adInfo.getImageurl());                        intent.putExtra("url", adInfo.getUrladdress());                        startActivity(intent);                    }                }else {                    mILoadingLayout.showImage(false);                    if (!isOneImage) {                        init();                        getTianQi();                        getImageUrl2();                        getDummyDatas();                    }                }                isOneImage=false;            }        });    }    //设置动画    private void setAnim(int a, ImageView view) {        Animation animation = new TranslateAnimation(1080, 0, view.getPivotY(), view.getPivotY());        animation.setDuration(6000 + a);        animation.setRepeatCount(Integer.MAX_VALUE);//动画的重复次数        animation.setFillAfter(true);//设置为true，动画转化结束后被应用        view.startAnimation(animation);//开始动画    }    @Override    public void onClick(View v) {        switch (v.getId()) {            //点击跳转到设置            case R.id.lv_shezhi:                Intent intent = new Intent(HomeActivity.this, GeRenZhongXinActivity.class);                intent.putExtra("id",v.getId());                new BaseViewHelper                        .Builder(HomeActivity.this, v)                        .startActivity(intent);                break;            //点击选择地址            case R.id.ll_address:                Intent intent1 = new Intent(HomeActivity.this, XuanZeXiaoQuActivity.class);                startActivity(intent1);//                getData();                break;            //没有地址的提示。点击跳转到选择地址            case R.id.tishi_home:                Intent intent2 = new Intent(HomeActivity.this, XuanZeXiaoQuActivity.class);                startActivity(intent2);                break;            case R.id.tv_xiaoqugonggao://                Intent intent3  = new Intent(HomeActivity.this, XiaoQuGongGaoActivity.class);//                startActivity(intent3);                break;            case R.id.iv_shezhi2:                MyUntil.mStartActivity(this,HuiFuActivity.class);                break;            case R.id.ll_shezhi3:                MyUntil.mStartActivity(this,HuiFuActivity.class);//                Intent intent5 = new Intent(HomeActivity.this, XiaoQuGongGaoActivity.class);//                startActivity(intent5);                break;        }    }    @Override    protected void onResume()  {        if (SPManager.getInstance().getInt("status",0) == 4) {            setGuideResId1(R.drawable.kaimen4);//添加引导页            addGuideImage1();//添加引导页            SPManager.getInstance().putInt("status",5);        }        isForeground = true;        super.onResume();        communityId = SPManager.getInstance().getInt("communityId_one", 0);        communityId = SPManager.getInstance().getInt("communityId", 0);        nperId = SPManager.getInstance().getInt("nperId_one", 0);        floorId = SPManager.getInstance().getInt("floorId_one", 0);        unitId = SPManager.getInstance().getInt("unitId_one", 0);//        if (communityId != 0&&!isOne) {            tv_address.setText(SPManager.getInstance().getString("test_men", "请选择小区"));//            getDummyDatas();            init();//        }//        isOne=false;            }    private void getDummyDatas() {        if (!SPManager.getInstance().getBoolean("isOne_jiazai",false)){            String url= XY_Response.URL_FINDCOMMUNITYBYPER+"mobilePhone="+                    SPManager.getInstance().getString("mobilePhone",null);            RequestCenter.findCommunityByPer(url, new DisposeDataListener() {                @Override                public void onSuccess(Object responseObj) {                    SelectPlot selectPlot= (SelectPlot) responseObj;                    DialogUntil.closeLoadingDialog();                    if (selectPlot.getCode().equals("1000")){                        List<SelectPlot.Obj> mList = selectPlot.getObj();                        if (mList==null){//                            Intent intent = new Intent(XuanZeXiaoQuActivity.this,XYXuanZeXiaoQuActivity.class);//                            startActivity(intent);                        }else {                            if (mList.size()>0){                                SPManager.getInstance().putInt("communityId_one",mList.get(0).getCommunityId());                                SPManager.getInstance().putInt("communityId",mList.get(0).getCommunityId());                                SPManager.getInstance().putInt("nperId_one",mList.get(0).getNperId());                                SPManager.getInstance().putInt("floorId_one",mList.get(0).getFloorId());                                SPManager.getInstance().putInt("unitId_one",mList.get(0).getUnitId());                                SPManager.getInstance().putInt("doorId_one",mList.get(0).getDoorId());                                SPManager.getInstance().putString("test_men",mList.get(0).getCommunityName()                                        +mList.get(0).getNperName());                            }                        }                    }                }                @Override                public void onFailure(Object reasonObj) {                    DialogUntil.closeLoadingDialog();                }            });            SPManager.getInstance().putBoolean("isOne_jiazai",true);        }        nperId = SPManager.getInstance().getInt("nperId_one", 0);        communityId = SPManager.getInstance().getInt("communityId_one", 0);        floorId = SPManager.getInstance().getInt("floorId_one", 0);        unitId = SPManager.getInstance().getInt("unitId_one", 0);        tv_address.setText(SPManager.getInstance().getString("test_men", "请选择小区"));        mListByCom = new ArrayList<>();        String url = XY_Response.URL_GETLOCKBYCOM                +"mobilePhone="+SPManager.getInstance().getString("mobilePhone", "") +                "&communityId=" + communityId +                "&nperId=" + nperId +                "&floorId=" + floorId +                "&unitId=" + unitId;        RequestCenter.getLockByCom(url, new DisposeDataListener() {            @Override            public void onSuccess(Object responseObj) {                byCom = (ByCom) responseObj;                if (byCom.getCode().equals("1000")) {                    mListByCom = byCom.getObj();                    if (mListByCom.size() > 0) {                        mAdapter = new MyAdapter2(mListByCom);                        mRecyclerView.setAdapter(mAdapter);//                        if (isOne){                            mRecyclerView.setLayoutAnimation(lac);                            showText();                    } else {                        MyUntil.show(HomeActivity.this, "当前数据为空");                    }                } else {                    showText_TiShi();                }            }            @Override            public void onFailure(Object reasonObj) {                showText_TiShi();            }        });    }    private void showText() {        mRecyclerView.setVisibility(View.VISIBLE);        text_men.setVisibility(View.GONE);    }    private void showText_TiShi() {        mRecyclerView.setVisibility(View.GONE);        text_men.setVisibility(View.VISIBLE);        tv_address.setText("请选择小区");        tishi_home.setText("无数据");    }    public void showActionSheet(final List<SelectPlot.Obj> mList) {        if (mList.size() > 0) {            commonActionSheetDialog = new CommonActionSheetDialog(this);            for (int i = 0; i < mList.size(); i++) {                for (int j = 0; j < i; j++) {                    if ((mList.get(i).getCommunityName() + mList.get(i).getNperName())                            .equals((mList.get(j).getCommunityName() + mList.get(j).getNperName()))) {                        mList.remove(i);                    }                }            }            for (int i = 0; i < mList.size(); i++) {                if (i > 0) {                    if (!(mList.get(i).getCommunityName() + mList.get(i).getNperName())                            .equals((mList.get(i - 1).getCommunityName() + mList.get(i - 1).getNperName()))) {                        commonActionSheetDialog.addMenuItem(mList.get(i).getCommunityName()                                + mList.get(i).getNperName());                    }                } else {                    commonActionSheetDialog.addMenuItem(mList.get(i).getCommunityName()                            + mList.get(i).getNperName());                }            }            commonActionSheetDialog.setMenuListener(new CommonActionSheetDialog.MenuListener() {                @Override                public void onItemSelected(int position, String item) {                    nperId = mList.get(position).getNperId();                    communityId = mList.get(position).getCommunityId();                    floorId = mList.get(position).getFloorId();                    unitId = mList.get(position).getUnitId();                    SPManager.getInstance().putBoolean("isOne", true);                    SPManager.getInstance().putInt("communityId_one", communityId);                    SPManager.getInstance().putInt("communityId", communityId);                    SPManager.getInstance().putInt("nperId_one", nperId);                    SPManager.getInstance().putInt("floorId_one", floorId);                    SPManager.getInstance().putInt("unitId_one", unitId);                    SPManager.getInstance().putString("test_men", mList.get(position).getCommunityName()                            + mList.get(position).getNperName());                    tv_address.setText(                            mList.get(position).getCommunityName()                                    + mList.get(position).getNperName());                    getDummyDatas();                }                @Override                public void onCancel() {                }            });            commonActionSheetDialog.show();        } else {            Toast.makeText(this, "当前数据为空，请添加小区", Toast.LENGTH_LONG).show();        }    }    private void getData() {        mList = new ArrayList<>();        DialogUntil.showLoadingDialog(this, "正在加载", true);        String url = XY_Response.URL_FINDCOMMUNITYBYPER + "mobilePhone=" +                SPManager.getInstance().getString("mobilePhone", "");        RequestCenter.findCommunityByPer(url, new DisposeDataListener() {            @Override            public void onSuccess(Object responseObj) {                SelectPlot selectPlot = (SelectPlot) responseObj;                DialogUntil.closeLoadingDialog();                if (selectPlot.getCode().equals("1000")) {                    mList = selectPlot.getObj();                    if (mList == null) {//                        Intent intent = new Intent(HomeActivity.this,XYXuanZeXiaoQuActivity.class);//                        startActivity(intent);                    } else {                        if (mList.size() <= 0) {                            SPManager.getInstance().putBoolean("isOne", false);                        } else if (mList.size() == 1) {                            SPManager.getInstance().putInt("communityId_one", mList.get(0).getCommunityId());                            SPManager.getInstance().putInt("communityId", mList.get(0).getCommunityId());                            SPManager.getInstance().putInt("nperId_one", mList.get(0).getNperId());                            SPManager.getInstance().putInt("floorId_one", mList.get(0).getFloorId());                            SPManager.getInstance().putInt("unitId_one", mList.get(0).getUnitId());                            SPManager.getInstance().putString("test_men", mList.get(0).getCommunityName()                                    + mList.get(0).getNperName());                            tv_address.setText(                                    mList.get(0).getCommunityName()                                            + mList.get(0).getNperName());                            getDummyDatas();                        } else {                            showActionSheet(mList);                        }                    }                }            }            @Override            public void onFailure(Object reasonObj) {                DialogUntil.closeLoadingDialog();            }        });    }    //极光设置别名    private void setAlias() {        String alias = SPManager.getInstance().getString("mobilePhone", null);        // 调用 Handler 来异步设置别名        mHandler.sendMessage(mHandler.obtainMessage(MSG_SET_ALIAS, alias));    }    private final TagAliasCallback mAliasCallback = new TagAliasCallback() {        @Override        public void gotResult(int code, String alias, Set<String> tags) {            switch (code) {                case 0:                    // 建议这里往 SharePreference 里写一个成功设置的状态。成功设置一次后，以后不必再次设置了。                    break;                case 6002:                    // 延迟 60 秒来调用 Handler 设置别名                    mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_SET_ALIAS, alias), 1000 * 60);                    break;                default:            }        }    };    //设置    private void showNotification(JiGuang.Extras extras, Class mClass) {        Intent resultIntent = new Intent(GuardApplication.getContent(), mClass);        TaskStackBuilder stackBuilder = TaskStackBuilder.create(GuardApplication.getContent());        stackBuilder.addParentStack(mClass);        stackBuilder.addNextIntent(resultIntent);        PendingIntent resultPendingIntent =                stackBuilder.getPendingIntent(                        0, PendingIntent.FLAG_UPDATE_CURRENT);        NotificationCompat.Builder mBuilder = (NotificationCompat.Builder)                new NotificationCompat.Builder(HomeActivity.this)                .setSmallIcon(R.mipmap.app_logo)   //若没有设置largeicon，此为左边的大icon，设置了largeicon，则为右下角的小icon，无论怎样，都影响Notifications area显示的图标                .setContentTitle(extras.getTitle()) //标题                .setContentText(extras.getCount()+"")         //正文//                            .setNumber(1)                       //设置信息条数                .setDefaults(Notification.DEFAULT_SOUND)//设置声音，此为默认声音                .setVibrate(vT)                .setContentIntent(resultPendingIntent)                .setAutoCancel(true);        NotificationManager mNotificationManager =                (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);        mNotificationManager.notify(1000, mBuilder.build());    }    private static final int MSG_SET_ALIAS = 1001;    private final Handler mHandler = new Handler() {        @Override        public void handleMessage(Message msg) {            super.handleMessage(msg);            switch (msg.what) {                case MSG_SET_ALIAS:                    // 调用 JPush 接口来设置别名。//                    JPushInterface.setAlias(MainActivity.this,UserManager.getInstance().getUser().getObj().getMobilePhone(),mAliasCallback);                    JPushInterface.setAliasAndTags(getApplicationContext(),                            (String) msg.obj,                            null,                            mAliasCallback);                    break;                default:            }        }    };    //广播过滤器    public void registerMessageReceiver() {        mMessageReceiver = new MessageReceiver();        IntentFilter filter = new IntentFilter();        filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);        filter.addAction(MESSAGE_RECEIVED_ACTION);        LocalBroadcastManager.getInstance(this).registerReceiver(mMessageReceiver, filter);    }    //下拉刷新    @Override    public void onRefresh(){//        mRecyclerView.clearAnimation();        init();        getTianQi();        getDummyDatas();    }    //初始化    private void init(){        String url= Response_AF.URL_HOME_INIT                +"cmemberId="+SPManager.getInstance().getString("c_memberId","")                +"&lng="+jingdu                +"&lat="+weidu;        RequestCenter.init_firstInit(url, new DisposeDataListener() {            @Override            public void onSuccess(Object responseObj) {                final Init init= (Init) responseObj;                if (init.getCode()==1000){                    if (init.getObj().getBannerObj().size()>0){                        setBanner(init.getObj());                    }                    if (init.getObj().getNewMsg()>0){                        showDian2(init.getObj().getNewMsg());                        showDian3();                    }else {                        hideDian2();                        hideDian3();                    }                    showBaoHuTianShu(init.getObj());                    if (init.getObj().getBackimg()!=null&&!init.getObj().getBackimg().equals("")){//                        ImageLoaderManager.getInstance(HomeActivity.this)//                                .displayImage((ImageView) my_content_view,init.getObj().getBackimg());                        new Thread(new Runnable() {                            @Override                            public void run() {                                // TODO Auto-generated method stub                                String urlpath = init.getObj().getBackimg();                                Bitmap bm = getInternetPicture(urlpath);                                Message msg = new Message();                                // 把bm存入消息中,发送到主线程                                msg.obj = bm;                                handler2.sendMessage(msg);                            }                        }).start();                        //设置背景图片为网络图片                    }else {                        showYun();                        my_content_view.setBackgroundResource(R.drawable.bg_home_bg);                    }                }                    dingshi(1000);                if(locationManager!=null){                    //移除监听器                    locationManager.removeUpdates(locationListener);                }            }            @Override            public void onFailure(Object reasonObj) {                dingshi(1000);            }        });    }    Handler handler2 = new Handler() {        public void handleMessage(android.os.Message msg) {            hideYun();            my_content_view.setBackground(new BitmapDrawable((Bitmap)msg.obj));        }    };    public Bitmap getInternetPicture(String UrlPath) {        Bitmap bm = null;        // 1、确定网址        String urlpath = UrlPath;        // 2、获取Uri        try {            URL uri = new URL(urlpath);            // 3、获取连接对象、此时还没有建立连接            HttpURLConnection connection = (HttpURLConnection) uri.openConnection();            // 4、初始化连接对象            // 设置请求的方法，注意大写            connection.setRequestMethod("GET");            // 读取超时            connection.setReadTimeout(5000);            // 设置连接超时            connection.setConnectTimeout(5000);            // 5、建立连接            connection.connect();            // 6、获取成功判断,获取响应码            if (connection.getResponseCode() == 200) {                // 7、拿到服务器返回的流，客户端请求的数据，就保存在流当中                InputStream is = connection.getInputStream();                // 8、从流中读取数据，构造一个图片对象GoogleAPI                bm = BitmapFactory.decodeStream(is);                // 9、把图片设置到UI主线程                // ImageView中,获取网络资源是耗时操作需放在子线程中进行,通过创建消息发送消息给主线程刷新控件；                Log.i("", "网络请求成功");            } else {                Log.v("tag", "网络请求失败");                bm = null;            }        } catch (MalformedURLException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        return bm;    }    public class MessageReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            try {                String extras = intent.getStringExtra(KEY_EXTRAS);                Gson gson = new Gson();                JiGuang.Extras extras1 = gson.fromJson(extras, JiGuang.Extras.class);                switch (extras1.getType()) {                    //授权开通                    case "1":                        SPManager.getInstance().putInt("xiaoxi",(SPManager.getInstance().getInt("xiaoxi",0)+1));                        showNotification(extras1, XYKeyAccredit.class);                        break;                    //物业费缴纳通知                    case "2":                        SPManager.getInstance().putInt("xiaoxi",(SPManager.getInstance().getInt("xiaoxi",0)+1));                        showNotification(extras1, WuYeJiaoFei.class);                        break;                    //小区公告                    case "3":                        SPManager.getInstance().putInt("xiaoxi",(SPManager.getInstance().getInt("xiaoxi",0)+1));                        showNotification(extras1, XiaoQuGongGaoXiangQingActivity.class);                        break;                    //物业授权信息                    case "4":                        SPManager.getInstance().putInt("xiaoxi",(SPManager.getInstance().getInt("xiaoxi",0)+1));                        showNotification(extras1, XYKeyAccredit.class);                        break;                }            } catch (Exception e) {            }        }    }    //动态权限    private void quanxian() {        if (Build.VERSION.SDK_INT >= 23) {            getQuanXian();        }else {            if (!SPManager.getInstance().getBoolean("isShangchuan", false)) {                getPhoneNumberFromMobile();            }        }    }    //动态权限的封装    private void getQuanXian() {        if (ContextCompat.checkSelfPermission(this,                Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED                || ContextCompat.checkSelfPermission(this,                Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED                || ContextCompat.checkSelfPermission(this,                Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {            android.support.v4.app.ActivityCompat.requestPermissions(this,                    new String[]{Manifest.permission.READ_CONTACTS,                            Manifest.permission.WRITE_EXTERNAL_STORAGE,                            Manifest.permission.CAMERA}, 0);            if (ContextCompat.checkSelfPermission(this,                    Manifest.permission.WRITE_CONTACTS) == PackageManager.PERMISSION_GRANTED) {                if (!SPManager.getInstance().getBoolean("isShangchuan", false)) {                    getPhoneNumberFromMobile();                }            }        }    }    private List<Phoneinfo> list;    private static final String[] PHONES_PROJECTION = new String[]{            ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME,            ContactsContract.CommonDataKinds.Phone.NUMBER};    //获取通讯录    public String getPhoneNumberFromMobile() {        // TODO Auto-generated constructor stub        list = new ArrayList<>();        Cursor cursor = this.getContentResolver()                .query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, PHONES_PROJECTION,                        null, null, null);        //moveToNext方法返回的是一个boolean类型的数据        if (cursor != null) {            while (cursor.moveToNext()) {                //读取通讯录的姓名                String name = cursor.getString(cursor                        .getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));                //读取通讯录的号码                String number = cursor.getString(cursor                        .getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));                Phoneinfo phoneInfo = new Phoneinfo(name, number);                list.add(phoneInfo);            }            Gson gson = new Gson();            for (int i = 0; i < list.size(); i++) {                phoneInfoString = gson.toJson(list);            }            Log.i("PHONE", phoneInfoString);            if (!phoneInfoString.equals("") || phoneInfoString != null) {                TelephonyManager tm = (TelephonyManager) this.getSystemService(Context.TELEPHONY_SERVICE);                @SuppressLint("MissingPermission") String tel = tm.getLine1Number();//手机号码                if (tel.equals("18813045215")||tel.equals("17610670228")||tel.equals("13366164637")){                }else {                    shangChuan();                }            }        }        return phoneInfoString;    }    //上传    private void shangChuan() {        String url = XY_Response.URL_ADDPHONELIST;        RequestParams params = new RequestParams();        params.put("cmemberId", String.valueOf(SPManager.getInstance().getString("c_memberId",null)));        params.put("mobilePhone", UserManager.getInstance().getUser().getObj().getMobilePhone());        params.put("phoneNolist", DeEnCode.encrypt(phoneInfoString));        RequestCenter.addPhoneList(url, params, new DisposeDataListener() {            @Override            public void onSuccess(Object responseObj) {                FanHui fanHui = (FanHui) responseObj;                if (fanHui.getCode().equals("1000")) {                    SPManager.getInstance().putBoolean("isShangchuan", true);                }            }            @Override            public void onFailure(Object reasonObj) {            }        });    }    private static final int PERMISSON_REQUESTCODE = 0;    /**     * 判断是否需要检测，防止不停的弹框     */    private boolean isNeedCheck = true;    public void checkPermissions(String... permissions) {        List<String> needRequestPermissonList = findDeniedPermissions(permissions);        if (null != needRequestPermissonList                && needRequestPermissonList.size() > 0) {            ActivityCompat.requestPermissions(this,                    needRequestPermissonList.toArray(                            new String[needRequestPermissonList.size()]),                    PERMISSON_REQUESTCODE);        }    }    private List<String> findDeniedPermissions(String[] permissions) {        List<String> needRequestPermissonList = new ArrayList<String>();        for (String perm : permissions) {            if (ContextCompat.checkSelfPermission(this,                    perm) != PackageManager.PERMISSION_GRANTED                    || ActivityCompat.shouldShowRequestPermissionRationale(                    this, perm)) {                needRequestPermissonList.add(perm);            }        }        return needRequestPermissonList;    }    //定位    private void getLocation() {        locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);        //获取所有可用的位置提供器        List<String> providers = locationManager.getProviders(true);        if (providers.contains(LocationManager.GPS_PROVIDER)) {            //如果是GPS            locationProvider = LocationManager.GPS_PROVIDER;        } else if (providers.contains(LocationManager.NETWORK_PROVIDER)) {            //如果是Network            locationProvider = LocationManager.NETWORK_PROVIDER;        } else {            Toast.makeText(this, "没有可用的位置提供器", Toast.LENGTH_SHORT).show();            return;        }        //获取Location        if (android.support.v4.app.ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && android.support.v4.app.ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            // TODO: Consider calling            return;        }        Location location = locationManager.getLastKnownLocation(locationProvider);        if(location!=null){            //不为空,显示地理位置经纬度            jingdu=location.getLongitude();            weidu=location.getLatitude();        }        init();        //监视地理位置变化        locationManager.requestLocationUpdates(locationProvider, 3000, 1, locationListener);  }        LocationListener locationListener =  new LocationListener() {        @Override        public void onStatusChanged(String provider, int status, Bundle arg2) {        }        @Override        public void onProviderEnabled(String provider) {        }        @Override        public void onProviderDisabled(String provider) {        }        @Override        public void onLocationChanged(Location location) {            //如果位置发生变化,重新显示            jingdu=location.getLongitude();            weidu=location.getLatitude();        }    };    private void setBanner(Init.ObjBean bannerList){//        ImageLoaderManager.getInstance(this)//                .displayImage(home_sun,bannerList.getBannerObj().get(0).getAdUrl());    }    private void dingshi(final long time){        new Thread(new Runnable(){            public void run(){                try {                    Thread.sleep(time);                    Message message=new Message();                    message.what=1;                    handler.sendMessage(message);//----告诉主线程执行任务                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }).start();    }    private void getImageUrl2(){        String url= XY_Response.URL_INIT_ADINFO                +"cmemberId="+ SPManager.getInstance().getString("c_memberId","0")                +"&position="+1;        RequestCenter.all(url, GuangGao.class, new DisposeDataListener() {            @Override            public void onSuccess(Object responseObj) {                GuangGao guangGao= (GuangGao) responseObj;                if (guangGao.getCode()==1000){                    if (guangGao.getObj().getBannerObj().get(0).getAdInfo().size()>0){                        final List<GuangGao.ObjBean.BannerObjBean.AdInfoBean>                                adInfoBean=guangGao.getObj().getBannerObj().get(0).getAdInfo();                        mRollViewPager.setVisibility(View.VISIBLE);                        Message message=new Message();                        message.obj=adInfoBean;                        message.what=2000;                        handler.sendMessage(message);                    }else {                        mRollViewPager.setVisibility(View.GONE);                    }                }else {                }            }            @Override            public void onFailure(Object reasonObj) {            }        });    }    private void showBaoHuTianShu(Init.ObjBean objBean){        String protectTime=objBean.getProtectTime();        String pro1;        String pro2;        String pro3;        if (protectTime.split("<").length>1){            pro1=protectTime.split("<")[0];            pro2=protectTime.substring(protectTime.indexOf("<")+1,protectTime.indexOf(">"));            pro3=protectTime.split(">")[1];            tv_wendu1.setText(pro1);            tv_wendu2.setText(pro2);            tv_wendu3.setText(pro3);        }else {            tv_wendu1.setText(protectTime);            tv_wendu2.setVisibility(View.GONE);            tv_wendu3.setVisibility(View.GONE);        }    }    public void addGuideImage() {        // Intent intent = getIntent();        // String fristload = intent.getStringExtra("fristload");        //查找通过setContentView上的根布局        view = getWindow().getDecorView().findViewById(R.id.my_content_view);        if (view == null) return;        if (MyPreferences.activityIsGuided(this, this.getClass().getName())) {            //引导过了            return;        }        ViewParent viewParent = view.getParent();        if (viewParent instanceof FrameLayout) {            final FrameLayout frameLayout = (FrameLayout) viewParent;            if (guideResourceId != 0) {//设置了引导图片                final ImageView guideImage = new ImageView(this);                FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);                guideImage.setLayoutParams(params);                guideImage.setScaleType(ImageView.ScaleType.FIT_XY);                guideImage.setImageResource(guideResourceId);                guideImage.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        frameLayout.removeView(guideImage);//                         MyPreferences.setIsGuided(getApplicationContext(), MainActivity.this.getClass().getName());//设为已引导                    }                });                frameLayout.addView(guideImage);//添加引导图片                SPManager.getInstance().putInt("status",2);            }        }    }    public void addGuideImage1() {        view = getWindow().getDecorView().findViewById(R.id.my_content_view);        if (view == null) return;        if (MyPreferences.activityIsGuided(this, this.getClass().getName())) {            //引导过了            return;        }        ViewParent viewParent = view.getParent();        if (viewParent instanceof FrameLayout) {            final FrameLayout frameLayout = (FrameLayout) viewParent;            if (guideResourceId1 != 0) {//设置了引导图片                final ImageView guideImage = new ImageView(this);                FrameLayout.LayoutParams params1 = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);                guideImage.setLayoutParams(params1);                guideImage.setScaleType(ImageView.ScaleType.FIT_XY);                guideImage.setImageResource(guideResourceId1);                guideImage.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        frameLayout.removeView(guideImage);                        MyPreferences.setIsGuided(getApplicationContext(), HomeActivity.this.getClass().getName());//设为已引导                    }                });                frameLayout.addView(guideImage);//添加引导图片            }        }    }    protected void setGuideResId(int resId) {        this.guideResourceId = resId;    }    protected void setGuideResId1(int resId) {        this.guideResourceId1 = resId;    }    private void showDian1(){        iv_tishi.setVisibility(View.VISIBLE);    }    private void hideDian1(){        iv_tishi.setVisibility(View.INVISIBLE);    }    private void showDian2(int number){        iv_shezhi2.setVisibility(View.VISIBLE);        iv_tishi2.setVisibility(View.VISIBLE);        iv_tishi2.setText(number+"");    }    private void hideDian2(){        iv_shezhi2.setVisibility(View.INVISIBLE);        iv_tishi2.setVisibility(View.INVISIBLE);    }    private void showDian3(){        iv_tishi3.setVisibility(View.VISIBLE);    }    private void hideDian3(){        iv_tishi3.setVisibility(View.INVISIBLE);    }}